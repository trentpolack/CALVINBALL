# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# A Tera template to be rendered as the changelog's header.
# See https://keats.github.io/tera/docs/#introduction
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

"""
# A Tera template to be rendered for each release in the changelog.
# See https://keats.github.io/tera/docs/#introduction
body = """

{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}

{% for group, commits in commits | filter(attribute="merge_commit", value=false) | group_by(attribute="group") %}

    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        {% if commit.message -%}
            {{ " * " ~ commit.message | trim | upper_first }}
            {{- commit.message | trim | split(pat="\n") | first | upper_first | trim -}}
        {% endif -%}
        {% if commit.scope -%}
            {{- commit.scope | trim -}}
        {% endif -%}
        {% if commit.body -%}
            {{ commit.body | replace(from=" - ", to="   - ")}}
            {{- commit.body | trim | upper_first -}}
        {% endif -%}
        {% if commit.hash -%}
            Hash: [{{ commit.hash | slice(start=0, end=7) }}]
        {% endif -%}
    {% endfor %}
{% endfor %}
"""

# A Tera template to be rendered as the changelog's footer.
# See https://keats.github.io/tera/docs/#introduction
footer = """
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
                    /compare/{{ release.previous.version }}..{{ release.version }}
        {% endif %}
    {% else -%}
        [unreleased]: https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
            /compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor -%}
<!-- generated by git-cliff -->
"""

# Remove leading and trailing whitespaces from the changelog's body.
trim = true
# Render body even when there are no releases to process.
render_always = true
# An array of regex based postprocessors to modify the changelog.
postprocessors = [
    # Replace the placeholder <REPO> with a URL.
    { pattern = '<REPO>', replace = "https://github.com/trentpolack/CALVINBALL-GAME" },
]

[git]
# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org
conventional_commits = true
# Exclude commits that do not match the conventional commits specification.
filter_unconventional = false
# Some preprocessor rules.
commit_preprocessors = [
    { pattern = "https://github.com/trentpolack/CALVINBALL-GAME/commit/([a-f0-9]{7})[a-f0-9]*", replace = "commit # [${1}](${0})"},
    { pattern = "([^a-zA-Z]*\b)", replace = " - "}
]

# An array of regex based parsers for extracting data from the commit message.
# Assigns commits to groups.
# Optionally sets the commit's scope and can decide to exclude commits from further processing.
commit_parsers = [
    { message = "^- ([A|a]dd)(.*$)", group = "<!-- 0 -->:rocket: New Features" },
    { message = "^- ([A|a]dded)(.*$)", group = "<!-- 0 -->:rocket: New Features" },
    { message = "^- ([S|s]upport)(.*$)", group = "<!-- 0 -->:rocket: New Features" },
    { message = "^- (add)(.*$)", group = "<!-- 0 -->:rocket: New Features" },
    { message = "^- (support)(.*$)", group = "<!-- 0 -->:rocket: New Features" },
    { message = "^- (^feat)(.*$)", group = "<!-- 0 -->:rocket: New Features" },
    { message = "^- (^fix)(.*$)", group = "<!-- 2 -->:bug: Bug fixes" },
    { message = "^- (^test)(.*$)", group = "<!-- 2 -->:bug: Bug fixes" },
    { message = "^- (fix)(.*$)", group = "<!-- 2 -->:bug: Bug fixes" },
    { message = "^- (^perf)(.*$)", group = "<!-- 3 -->:zap: Performance" },
    { message = "^- (^[P|p]erf)(.*$)*", group = "<!-- 3 -->:zap: Performance" },
    { message = "^.*: (^[R|r]emove)(.*$)", group = "<!-- 4 -->:no_entry:Removed" },
    { message = "^.*: (^[R|r]emoved)(.*$)", group = "<!-- 4 -->:no_entry:Removed" },
    { message = "^.*: (^[D|d]elete)(.*$)", group = "<!-- 4 -->:no_entry:Removed" },
    { message = "^.*: (^[D|d]eleted)(.*$)", group = "<!-- 4 -->:no_entry:Removed" },
    { message = "^- (^[C|c]hore)(.*$)", group = "<!-- 1 -->:hammer: Changes" },
    { message = "^- (^[M|m]isc)(.*$)", group = "<!-- 1 -->:hammer: Changes" },
    { message = ".*", group = "<!-- 6 -->:cat: Note" },
    { body = "$^", skip = true },
]

# Limit the total number of commits.
limit_commits = 100
# Split commits.
split_commits = true
# Prevent commits that are breaking from being excluded by commit parsers.
filter_commits = false
# Order releases topologically instead of chronologically.
topo_order = false
# Order of commits in each group/release within the changelog.
# Allowed values: newest, oldest
sort_commits = "oldest"
